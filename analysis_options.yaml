analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    # allow having TODOs in the code
    todo: ignore
    # Ignore analyzer hints for updating pubspecs when using Future or
    # Stream and not importing dart:async
    # Please see https://github.com/flutter/flutter/pull/24528 for details.
    sdk_version_async_exported_from_core: ignore
    dead_code: info
    invalid_assignment: warning
  exclude:
    - "test/**"

linter:
  # Rules are in the same order as documented at http://dart-lang.github.io/linter/lints
  rules:
    # Prevents accidental return type changes which results in a breaking API change.
    # Enforcing return type makes API changes visible in a diff
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Protect against unintentionally overriding superclass members
    # http://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # Highlights boolean expressions which can be simplified
    # http://dart-lang.github.io/linter/lints/avoid_bool_literals_in_conditional_expressions.html
    - avoid_bool_literals_in_conditional_expressions

    # AVOID catches without on clauses.
    # There are no strong arguments to enable this rule
    # http://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    # - avoid_catches_without_on_clauses

    # Errors aren't for catching but to prevent prior to runtime
    # http://dart-lang.github.io/linter/lints/avoid_catching_errors.html
    - avoid_catching_errors

    # Can usually be replaced with an extension
    # http://dart-lang.github.io/linter/lints/avoid_classes_with_only_static_members.html
    - avoid_classes_with_only_static_members

    # Prevents accidental empty else cases. See sample at:
    # http://dart-lang.github.io/linter/lints/avoid_empty_else.html
    - avoid_empty_else

    # Prevents allocating a lambda and allows return/break/continue control flow statements
    # inside the loop
    # http://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    - avoid_function_literals_in_foreach_calls

    # Don't implement classes that override ==
    # http://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Removes redundant `= null;`
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null

    # Null checks aren't required in ==() operators
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators

    # Good APIs don't use ambiguous boolean parameters. Instead use named parameters
    # https://dart-lang.github.io/linter/lints/avoid_positional_boolean_parameters.html
    - avoid_positional_boolean_parameters

    # Don't call print in production code
    # https://dart-lang.github.io/linter/lints/avoid_print.html
    - avoid_print

    # Always prefer function references over typedefs.
    # Jumping twice in code to see the signature of a lambda sucks. This is different from the
    # flutter analysis_options
    # https://dart-lang.github.io/linter/lints/avoid_private_typedef_functions.html
    - avoid_private_typedef_functions

    # Avoid relative imports for files in `lib/`.
    # When mixing relative and absolute imports it's possible to create confusion where
    # the same member gets imported in two different ways. An easy way to avoid that is to ensure
    # you have no relative imports that include `lib/` in their paths.
    # https://dart-lang.github.io/linter/lints/avoid_relative_lib_imports.html
    - avoid_relative_lib_imports

    # Setters always return void, therefore defining void is redundant
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters

    # Use empty returns, don't show off with you knowledge about dart internals.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    - avoid_returning_null_for_void

    # Hinting you forgot about the cascade operator. But too often you did this on purpose.
    # There are plenty of valid reasons to return this.
    # https://dart-lang.github.io/linter/lints/avoid_returning_this.html
    # - avoid_returning_this

    # Prevents logical inconsistencies. It's good practice to define getters for all existing setters.
    # https://dart-lang.github.io/linter/lints/avoid_setters_without_getters.html
    - avoid_setters_without_getters

    # Don't reuse a type parameter when on with the same name already exists in the same scope
    # https://dart-lang.github.io/linter/lints/avoid_shadowing_type_parameters.html
    - avoid_shadowing_type_parameters

    # A single cascade operator can be replaced with a normal method call
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    - avoid_single_cascade_in_expression_statements

    # Don't use a parameter names which can be confused with a types (i.e. int, bool, num, ...)
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    - avoid_types_as_parameter_names

    # Unused parameters should be removed
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    - avoid_unused_constructor_parameters

    # For async functions use `Future<void>` as return value, not `void`
    # This allows usage of the await keyword and prevents operations from running in parallel.
    # https://dart-lang.github.io/linter/lints/avoid_void_async.html
    - avoid_void_async

    # Use the await keyword only for futures. There is nothing to await in synchronous code
    # https://dart-lang.github.io/linter/lints/await_only_futures.html
    - await_only_futures

    # Follow the style guide and use UpperCamelCase for class names and typedefs
    # https://dart-lang.github.io/linter/lints/camel_case_types.html
    - camel_case_types

    # Prevents leaks and code executing after their lifecycle.
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    - cancel_subscriptions

    # DO reference only in scope identifiers in doc comments.
    # False positives:
    # - https://github.com/dart-lang/linter/issues/1142
    #
    # https://dart-lang.github.io/linter/lints/comment_references.html
    # - comment_references

    # Follow standard dart naming style
    # https://dart-lang.github.io/linter/lints/constant_identifier_names.html
    - constant_identifier_names

    # Prevents hard to debug code
    # https://dart-lang.github.io/linter/lints/control_flow_in_finally.html
    - control_flow_in_finally


    # Single line `if`s are fine, but when a new line splits the bool expression and body curly
    # braces are recommended. It prevents the danging else problem and easily allows the addition
    # of more lines inside the if body
    # https://dart-lang.github.io/linter/lints/curly_braces_in_flow_control_structures.html
    - curly_braces_in_flow_control_structures

    # Follows dart style. Fully supported by IDEs and no manual effort for a consistent style
    # https://dart-lang.github.io/linter/lints/directives_ordering.html
    - directives_ordering

    # Add a comment why no further error handling is required
    # https://dart-lang.github.io/linter/lints/empty_catches.html
    - empty_catches

    # Do use ; instead of {} for empty constructor bodies.
    # https://dart-lang.github.io/linter/lints/empty_constructor_bodies.html
    - empty_constructor_bodies

    # Don't allow empty if bodies. Works together with curly_braces_in_flow_control_structures
    # https://dart-lang.github.io/linter/lints/empty_statements.html
    - empty_statements

    # Follow dart file naming schema
    # https://dart-lang.github.io/linter/lints/file_names.html
    - file_names

    # `hashCode` and `==` need to be consistent. One can't live without another.
    # https://dart-lang.github.io/linter/lints/hash_and_equals.html
    - hash_and_equals

    # DON'T import implementation files from another package.
    # If you need access to some internal code, create an issue
    # https://dart-lang.github.io/linter/lints/implementation_imports.html
    - implementation_imports

    # Don't test for conditions that can be inferred at compile time or test the same
    # condition twice.
    # https://dart-lang.github.io/linter/lints/invariant_booleans.html
    - invariant_booleans

    # Type check for Iterable<T>.contains(other) where other is! T
    # otherwise contains will always report false. Those errors are usually very hard to catch.
    # https://dart-lang.github.io/linter/lints/iterable_contains_unrelated_type.html
    - iterable_contains_unrelated_type

    # Hint to join return and assignment.
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    - join_return_with_assignment

    # DO name libraries using lowercase_with_underscores.
    # https://dart-lang.github.io/linter/lints/library_names.html
    - library_names

    # Follow dart style
    # https://dart-lang.github.io/linter/lints/library_prefixes.html
    - library_prefixes

    # AVOID lines longer than 80 characters
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    - lines_longer_than_80_chars

    # Type check for List<T>.remove(item) where item is! T
    # The list can't contain item. Those errors are not directly obvious especially when
    # refactoring.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    - list_remove_unrelated_type

    # Concat Strings obviously with `+` inside a list.
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    - no_adjacent_strings_in_list

    # DON'T use more than one case with same value.
    # https://dart-lang.github.io/linter/lints/no_duplicate_case_values.html
    - no_duplicate_case_values

    # DO name non-constant identifiers using lowerCamelCase.
    # https://dart-lang.github.io/linter/lints/non_constant_identifier_names.html
    - non_constant_identifier_names

    # Might become irrelevant when non-nullable types land in dart. Until then use this lint check
    # which checks for
    # non null arguments for specific dart sdk methods.
    # https://dart-lang.github.io/linter/lints/null_closures.html
    - null_closures

    # Types for local variables may improve readability.
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    # - omit_local_variable_types

    # Defining interfaces (abstract classes), with only one method, makes sense architecture wise
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    # - one_member_abstracts

    # Highlights unintentionally overridden fields.
    # https://dart-lang.github.io/linter/lints/overridden_fields.html
    - overridden_fields

    # Only relevant for packages, not applications or general dart code
    # https://dart-lang.github.io/linter/lints/package_api_docs.html
    # - package_api_docs

    # Follow dart style package naming convention
    # https://dart-lang.github.io/linter/lints/package_names.html
    - package_names

    # DON'T assign new values to parameters of methods or functions.
    # Most likely a mistake, if not: bad practice.
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    - parameter_assignments

    # DO put asserts in initializer list for constructors with only asserts in their body.
    # Makes it easier to migrate to const constructors.
    # https://dart-lang.github.io/linter/lints/prefer_asserts_in_initializer_lists.html
    - prefer_asserts_in_initializer_lists

    # DO use collection literals when possible.
    # Collection literals are shorter. They exists, use them.
    # https://dart-lang.github.io/linter/lints/prefer_collection_literals.html
    - prefer_collection_literals

    # PREFER using ??= over testing for null.
    # https://dart-lang.github.io/linter/lints/prefer_conditional_assignment.html
    - prefer_conditional_assignment

    # PREFER using const for instantiating constant constructors.
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors.html
    - prefer_const_constructors

    # PREFER declaring const constructors on @immutable classes.
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors_in_immutables.html
    - prefer_const_constructors_in_immutables

    # PREFER using const for const declarations.
    # final is good, const is better
    # https://dart-lang.github.io/linter/lints/prefer_const_declarations.html
    - prefer_const_declarations

    # PREFER using const for instantiating list, map and set literals used as parameters
    # in immutable class instantiations.
    # https://dart-lang.github.io/linter/lints/prefer_const_literals_to_create_immutables.html
    - prefer_const_literals_to_create_immutables

    # PREFER defining constructors instead of static methods to create instances.
    # Dart has named constructors. Static methods in other languages (java) are a workaround which
    # don't have named constructors.
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    - prefer_constructors_over_static_methods

    # DON'T use indexOf to see if a collection contains an element.
    # Contains may be faster and is easier to read
    # https://dart-lang.github.io/linter/lints/prefer_contains.html
    - prefer_contains

    # DO use double quotes where they wouldn't require additional escapes. (just preference)
    # imports are single quoted by default...
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    # - prefer_double_quotes

    # DO Use = to separate a named parameter from its default value.
    # Prevent confusion with call-side when using named parameters
    # https://dart-lang.github.io/linter/lints/prefer_equal_for_default_values.html
    - prefer_equal_for_default_values

    # Single line methods + implementation makes it hard to write comments for that line.
    # Dense code isn't necessarily better code.
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    # - prefer_expression_function_bodies

    # DO prefer declaring private fields as final if they are not reassigned later in the class.
    # Avoid accidental reassignments and allows the compiler to do optimizations.
    # https://dart-lang.github.io/linter/lints/prefer_final_fields.html
    - prefer_final_fields

    # DO prefer declaring for-each loop variables as final if they are not reassigned later in
    # the code.
    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # https://dart-lang.github.io/linter/lints/prefer_final_in_for_each.html
    - prefer_final_in_for_each

    # DO prefer declaring variables as final if they are not reassigned later in the code.
    # https://dart-lang.github.io/linter/lints/prefer_final_locals.html
    - prefer_final_locals

    # When building maps from iterables, it is preferable to use for elements.
    # https://dart-lang.github.io/linter/lints/prefer_for_elements_to_map_fromIterable.html
    - prefer_for_elements_to_map_fromIterable

    # DO use a function declaration to bind a function to a name.
    # As Dart allows local function declarations, it is a good practice to use them in the place
    # of function literals.
    # https://dart-lang.github.io/linter/lints/prefer_function_declarations_over_variables.html
    - prefer_function_declarations_over_variables

    # PREFER generic function type aliases. For consistency.
    # https://dart-lang.github.io/linter/lints/prefer_generic_function_type_aliases.html
    - prefer_generic_function_type_aliases

    # When building collections, it is preferable to use if elements rather than conditionals.
    # https://dart-lang.github.io/linter/lints/prefer_if_elements_to_conditional_expressions.html
    - prefer_if_elements_to_conditional_expressions

    # Prefer using if null operators instead of null checks in conditional expressions.
    # https://dart-lang.github.io/linter/lints/prefer_if_null_operators.html
    - prefer_if_null_operators

    # DO use initializing formals when possible.
    # https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html
    - prefer_initializing_formals

    # Declare elements in list literals inline, rather than using add and addAll methods where
    # possible.
    # https://dart-lang.github.io/linter/lints/prefer_inlined_adds.html
    - prefer_inlined_adds

    # PREFER using interpolation to compose strings and values.
    # https://dart-lang.github.io/linter/lints/prefer_interpolation_to_compose_strings.html
    - prefer_interpolation_to_compose_strings

    # DON'T use length to see if a collection is empty. Iterables do not necessary know their
    # length.
    # https://dart-lang.github.io/linter/lints/prefer_is_empty.html
    - prefer_is_empty

    # PREFER x.isNotEmpty to !x.isEmpty for Iterable and Map instances.
    # https://dart-lang.github.io/linter/lints/prefer_is_not_empty.html
    - prefer_is_not_empty

    # PREFER iterable.whereType<T>() over iterable.where((e) => e is T).
    # https://dart-lang.github.io/linter/lints/prefer_iterable_whereType.html
    - prefer_iterable_whereType

    # Prefer using null aware operators instead of null checks in conditional expressions.
    # https://dart-lang.github.io/linter/lints/prefer_null_aware_operators.html
    - prefer_null_aware_operators

    # Use spread collections when possible.
    # https://dart-lang.github.io/linter/lints/prefer_spread_collections.html
    - prefer_spread_collections

    # PREFER specifying a type annotation for uninitialized variables and fields.
    # https://dart-lang.github.io/linter/lints/prefer_typing_uninitialized_variables.html
    - prefer_typing_uninitialized_variables

    # DO NOT use the type Null where void would work.
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    - prefer_void_to_null

    # DO specify a deprecation message (with migration instructions and/or a removal schedule)
    # in the Deprecation constructor.
    # https://dart-lang.github.io/linter/lints/provide_deprecation_message.html
    - provide_deprecation_message

    # Definitely not a rule for standard dart code. Maybe relevant for packages
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    # - public_member_api_docs

    # DON'T create recursive getters.
    # https://dart-lang.github.io/linter/lints/recursive_getters.html
    - recursive_getters

    # PREFER using /// for doc comments.
    # https://dart-lang.github.io/linter/lints/slash_for_doc_comments.html
    - slash_for_doc_comments

    # Sort child properties last in widget instance creations. (FLUTTER ONLY)
    # https://dart-lang.github.io/linter/lints/sort_child_properties_last.html
    - sort_child_properties_last

    # DO sort constructor declarations before other members.
    # https://dart-lang.github.io/linter/lints/sort_constructors_first.html
    #- sort_constructors_first

    # DO sort pub dependencies in pubspec.yaml.
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    - sort_pub_dependencies

    # DO sort unnamed constructor declarations first, before named ones.
    # https://dart-lang.github.io/linter/lints/sort_unnamed_constructors_first.html
    - sort_unnamed_constructors_first

    # DO test type arguments in operator ==(Object other).
    # https://dart-lang.github.io/linter/lints/test_types_in_equals.html
    - test_types_in_equals

    # AVOID throwing exceptions in finally blocks.
    # https://dart-lang.github.io/linter/lints/throw_in_finally.html
    - throw_in_finally

    # PREFER type annotating public APIs.
    # Type annotations make the compiler intelligent, use them
    # https://dart-lang.github.io/linter/lints/type_annotate_public_apis.html
    - type_annotate_public_apis

    # DON'T type annotate initializing formals.
    # https://dart-lang.github.io/linter/lints/type_init_formals.html
    - type_init_formals

    # Avoid returning an awaited expression when the expression type is assignable
    # to the function's return type.
    # https://dart-lang.github.io/linter/lints/unnecessary_await_in_return.html
    - unnecessary_await_in_return

    # AVOID using braces in interpolation when not needed.
    # https://dart-lang.github.io/linter/lints/unnecessary_brace_in_string_interps.html
    - unnecessary_brace_in_string_interps

    # AVOID repeating const keyword in a const context.
    # https://dart-lang.github.io/linter/lints/unnecessary_const.html
    - unnecessary_const

    # AVOID wrapping fields in getters and setters just to be "safe".
    # Getter/setters can be added later on in a non API breaking manner.
    # https://dart-lang.github.io/linter/lints/unnecessary_getters_setters.html
    - unnecessary_getters_setters

    # Flutter setState is a good example where a lambda should always be used.
    # https://github.com/dart-lang/linter/issues/498
    #
    # Some generic code sometimes requires lambdas, otherwise the generic type isn't forwarded correctly.
    #
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    # - unnecessary_lambdas

    # AVOID new keyword to create instances.
    # https://dart-lang.github.io/linter/lints/unnecessary_new.html
    - unnecessary_new

    # AVOID null in null-aware assignment. Don't assign `null` when value is already `null`.
    # https://dart-lang.github.io/linter/lints/unnecessary_null_aware_assignments.html
    - unnecessary_null_aware_assignments

    # AVOID using null as an operand in if null operators. Don't assign `null` when value
    # is already `null`.
    # https://dart-lang.github.io/linter/lints/unnecessary_null_in_if_null_operators.html
    - unnecessary_null_in_if_null_operators

    # DON'T override a method to do a super method invocation with same parameters.
    # https://dart-lang.github.io/linter/lints/unnecessary_overrides.html
    - unnecessary_overrides

    # AVOID using parenthesis when not needed.
    # https://dart-lang.github.io/linter/lints/unnecessary_parenthesis.html
    - unnecessary_parenthesis

    # AVOID using unnecessary statements. Avoid magic overloads of + operators
    # https://dart-lang.github.io/linter/lints/unnecessary_statements.html
    - unnecessary_statements

    # DON'T use this when not needed to avoid shadowing.
    # https://dart-lang.github.io/linter/lints/unnecessary_this.html
    - unnecessary_this

    # DON'T Compare references of unrelated types for equality.
    # Highlights potential bugs where unrelated types are compared with another.
    # (always *not* equal).
    # https://dart-lang.github.io/linter/lints/unrelated_type_equality_checks.html
    - unrelated_type_equality_checks

    # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color.
    # Colors have four 8-bit channels, which adds up to 32 bits, so Colors are described using
    # a 32 bit integer.
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    - use_full_hex_values_for_flutter_colors

    # Use generic function type syntax for parameters.
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    - use_function_type_syntax_for_parameters

    # DO use rethrow to rethrow a caught exception.
    # Use rethrow to preserve the original stacktrace.
    # https://dart.dev/guides/language/effective-dart/usage#do-use-rethrow-to-rethrow-a-caught-exception
    #
    # https://dart-lang.github.io/linter/lints/use_rethrow_when_possible.html
    - use_rethrow_when_possible

    # DO use a setter for operations that conceptually change a property.
    # https://dart-lang.github.io/linter/lints/use_setters_to_change_properties.html
    - use_setters_to_change_properties

    # DO use string buffers to compose strings.
    # In most cases, using a string buffer is preferred for composing strings due to its
    # improved performance.
    # https://dart-lang.github.io/linter/lints/use_string_buffers.html
    - use_string_buffers

    # PREFER naming a method to___() if it copies the object's state to a new object.
    # PREFER naming a method as___() if it returns a different representation backed by the
    # original object.
    # Naming is hard, strict rules don't help.
    # https://dart-lang.github.io/linter/lints/use_to_and_as_if_applicable.html
    # - use_to_and_as_if_applicable

    # DO use valid regular expression syntax when creating regular expression instances.
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    - valid_regexps

    # DO NOT assign to void.
    # https://dart-lang.github.io/linter/lints/void_checks.html
    - void_checks
